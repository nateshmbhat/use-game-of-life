{"version":3,"sources":["../../dist/index.es.js","App.js","index.js"],"names":["_a","_b","updateInterval","_c","gridRows","_d","gridColumns","_e","randomizeGrid","_f","randomGridAlivePercent","_getEmptyGrid","rows","i","push","Array","from","runningRef","_g","running","setrunning","_h","Math","random","_getRandomGrid","grid","setGrid","countNeightBours","g","r","c","n","forEach","pair","newR","newC","runSimulation","current","gCopy","row","_col","setTimeout","setCell","value","draft","start","stop","isRunning","clearGrid","App","useGameOfLife","className","style","display","gridTemplateColumns","gridAutoRows","map","col","key","border","backgroundColor","undefined","onClick","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6641f8a.chunk.js","sourcesContent":["import { useRef, useState, useCallback } from 'react';\nimport { produce } from 'immer';\n\nvar useGameOfLife = function useGameOfLife(_a) {\n  var _b = _a.updateInterval,\n      updateInterval = _b === void 0 ? 500 : _b,\n      _c = _a.gridRows,\n      gridRows = _c === void 0 ? 50 : _c,\n      _d = _a.gridColumns,\n      gridColumns = _d === void 0 ? 50 : _d,\n      _e = _a.randomizeGrid,\n      randomizeGrid = _e === void 0 ? false : _e,\n      _f = _a.randomGridAlivePercent,\n      randomGridAlivePercent = _f === void 0 ? 50 : _f;\n\n  var _getEmptyGrid = function _getEmptyGrid() {\n    var rows = [];\n\n    for (var i = 0; i < gridRows; i++) {\n      rows.push(Array.from(new Array(gridColumns), function () {\n        return 0;\n      }));\n    }\n\n    return rows;\n  };\n\n  var _getRandomGrid = function _getRandomGrid() {\n    var rows = [];\n\n    for (var i = 0; i < gridRows; i++) {\n      rows.push(Array.from(new Array(gridColumns), function () {\n        return Math.random() < randomGridAlivePercent / 100 ? 1 : 0;\n      }));\n    }\n\n    return rows;\n  };\n\n  var runningRef = useRef(false);\n\n  var _g = useState(false),\n      running = _g[0],\n      setrunning = _g[1];\n\n  var _h = useState(function () {\n    return randomizeGrid ? _getRandomGrid() : _getEmptyGrid();\n  }),\n      grid = _h[0],\n      setGrid = _h[1];\n\n  var setCell = function setCell(r, c, value) {\n    setGrid(function (g) {\n      return produce(g, function (draft) {\n        draft[r][c] = value ? 1 : 0;\n      });\n    });\n  };\n\n  var isRunning = function isRunning() {\n    return running;\n  };\n\n  var start = function start() {\n    setrunning(true);\n    runningRef.current = true;\n    runSimulation();\n  };\n\n  var stop = function stop() {\n    setrunning(false);\n    runningRef.current = false;\n  };\n\n  var clearGrid = function clearGrid() {\n    setGrid(_getEmptyGrid());\n  };\n\n  var countNeightBours = useCallback(function (g, r, c) {\n    var n = 0;\n    var operations = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [0, -1], [1, -1], [1, 0], [1, 1]];\n    operations.forEach(function (pair) {\n      var newR = r + pair[0];\n      var newC = c + pair[1];\n\n      if (newR >= 0 && newR < gridRows && newC >= 0 && newC < gridColumns && g[newR][newC] == 1) {\n        n += 1;\n      }\n    });\n    return n;\n  }, []);\n  var runSimulation = useCallback(function () {\n    if (!runningRef.current) return;\n    setGrid(function (g) {\n      return produce(g, function (gCopy) {\n        return gCopy.forEach(function (row, r) {\n          return row.forEach(function (_col, c) {\n            var n = countNeightBours(g, r, c);\n\n            if (gCopy[r][c] == 0 && n == 3) {\n              gCopy[r][c] = 1;\n            } else {\n              if (n < 2 || n > 3) gCopy[r][c] = 0;\n            }\n          });\n        });\n      });\n    });\n    setTimeout(runSimulation, updateInterval);\n  }, []);\n  return {\n    grid: grid,\n    setCell: setCell,\n    start: start,\n    stop: stop,\n    isRunning: isRunning,\n    clearGrid: clearGrid\n  };\n};\n\nexport default useGameOfLife;","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport useGameOfLife from 'use-game-of-life' ; \n\nconst App  = () => {\n\n  const {grid , setCell ,  start , stop , isRunning  } = useGameOfLife({updateInterval : 25 , randomizeGrid : true , randomGridAlivePercent : 30 }) ;\n\n  return (\n    <>\n      <div className=\"App\" style={{\n        display: 'grid',\n        gridTemplateColumns: 'repeat(50 , 1fr)',\n        gridAutoRows: '19px'\n      }} >\n        {\n          grid.map((row, r) =>\n            row.map((col, c) =>\n              <div key={`${r}-${c}`}\n                style={{\n                  border: '1px solid black',\n                  backgroundColor: grid[r][c] ? 'green' : undefined\n                }}\n                onClick={() => {\n                  setCell( r , c, !grid[r][c]) ;  \n                  console.log(\"You clicked \", r, c)\n                }}\n              />\n            )\n          )\n        }\n      </div>\n      <button onClick={() => { \n        if(isRunning()){\n          stop() ; \n        }\n        else{\n          start() ; \n        }\n      }}>{isRunning()? 'Stop' : 'Start'}</button>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}