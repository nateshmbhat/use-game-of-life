{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["import { useRef, useState, useCallback } from \"react\";\nimport { produce as produceNextState } from 'immer';\n\nconst useGameOfLife = ({ updateInterval = 500, gridRows = 50, gridColumns = 50, randomizeGrid = false, randomGridAlivePercent = 50 }) => {\n  const _getEmptyGrid = () => {\n    let rows = []\n    for (let i = 0; i < gridRows; i++) {\n      rows.push(Array.from(new Array(gridColumns), () => 0));\n    }\n    return rows;\n  }\n\n  const _getRandomGrid = () => {\n    let rows = []\n    for (let i = 0; i < gridRows; i++) {\n      rows.push(Array.from(new Array(gridColumns), () => Math.random() < (randomGridAlivePercent / 100) ? 1 : 0));\n    }\n    return rows;\n  }\n\n\n\n  const runningRef = useRef(false);\n  const [running, setrunning] = useState(false)\n\n\n  const [grid, setGrid] = useState(() => {\n    return randomizeGrid ? _getRandomGrid() : _getEmptyGrid();\n  });\n\n\n\n  const setCell = (r: number, c: number, value: boolean) => {\n    setGrid((g) => {\n      return produceNextState(g, draft => {\n        draft[r][c] = value ? 1 : 0;\n      });\n    });\n  }\n  const isRunning = () => {\n    return running;\n  }\n  const start = () => {\n    setrunning(true);\n    runningRef.current = true;\n    runSimulation();\n  }\n  const stop = () => {\n    setrunning(false);\n    runningRef.current = false;\n  }\n\n  const clearGrid = () => {\n    setGrid(_getEmptyGrid());\n  }\n\n  const countNeightBours = useCallback((g: number[][], r: number, c: number) => {\n    let n = 0;\n    const operations = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, 1],\n      [0, -1],\n      [1, -1],\n      [1, 0],\n      [1, 1],\n    ]\n\n    operations.forEach(pair => {\n      let newR = r + pair[0];\n      let newC = c + pair[1];\n\n      if (newR >= 0 && newR < gridRows && newC >= 0 && newC < gridColumns && g[newR][newC] == 1) {\n        n += 1;\n      }\n    })\n    return n;\n  }, []);\n\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n\n    setGrid(g => produceNextState(g, gCopy =>\n      gCopy.forEach((row, r) =>\n        row.forEach((_col, c) => {\n\n          let n = countNeightBours(g, r, c);\n\n          if (gCopy[r][c] == 0 && n == 3) {\n            gCopy[r][c] = 1;\n          }\n          else {\n            if (n < 2 || n > 3) gCopy[r][c] = 0;\n          }\n        })\n      )))\n\n    setTimeout(runSimulation, updateInterval);\n\n  }, [])\n\n\n  return { grid, setCell, start, stop, isRunning, clearGrid };\n}\n\nexport default useGameOfLife; "],"names":["useRef","produceNextState","useCallback"],"mappings":"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"}